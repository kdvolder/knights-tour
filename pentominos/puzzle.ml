open Knights_tour
type t = {
    (** pieces remaining to be placed *)
    pieces : Polyomino.t list;
    (** board upon which to place the pieces *)
    board : Board.t;
}

let classic = {
  pieces = Polyomino.of_order 5;
  board = Board.classic;
}

let most_constrained_point _ targets =
  (* TODO: this is a dummy implementation. Real implementation should determine 
     which polyomino placements are valid for each target and then retain the
     target with the fewest valid placements.*)
  PointSet.choose targets

let solve_aux puzzle targets = 
  let open Searchspace in
  if PointSet.is_empty targets then
    return puzzle.board
  else 
    most_constrained_point puzzle targets 
    |> (fun _target -> Searchspace.empty)

let lowest_point board = 
  Board.vacant board |> PointSet.min_elt

let solve puzzle = 
  solve_aux puzzle (PointSet.singleton (lowest_point puzzle.board))

type placement = {
  piece: Polyomino.t;
  points: PointSet.t;
}

let move_to_target target points = 
  let open Searchspace in
  Searchspace.of_seq (PointSet.to_seq points)
  |-> (fun point -> PointSet.translate (Point.diff target point) points)

let place_one piece board target = 
  let open Searchspace in
  Polyomino.variants piece |> Searchspace.of_list
  |=> move_to_target target
  |?> (fun points ->
    points |> PointSet.for_all (fun point -> Board.(get board point = Vacant))
  )
  |-> (fun points -> {points;piece})

let%expect_test "Placements of a polyomino on a target" =
  let puzzle = classic in
  let pentos = puzzle.pieces in
  let piece = List.hd pentos in
  let board = puzzle.board in

  let target = Point.{x=1;y=2} in

  Printf.printf "===============\nPlacing @ (%d, %d):\n%s" target.x target.y (Polyomino.to_string piece);
  place_one piece board target
  |> Searchspace.to_seq
  |> Seq.iter (fun placement -> 
    Board.put board placement.points placement.piece 
    |> Board.to_string
    |> Printf.printf "\n%s"
  )
  ; [%expect{|
    ===============
    Placing @ (1, 2):
    #####

    ........
    ........
    .AAAAA..
    ...##...
    ...##...
    ........
    ........
    ........

    ........
    ........
    AAAAA...
    ...##...
    ...##...
    ........
    ........
    ........

    ........
    ........
    .A......
    .A.##...
    .A.##...
    .A......
    .A......
    ........

    ........
    .A......
    .A......
    .A.##...
    .A.##...
    .A......
    ........
    ........

    .A......
    .A......
    .A......
    .A.##...
    .A.##...
    ........
    ........
    ........ |}]

let%expect_test "Placements of all tetro-minos @(0,0)" =
    let pentos = Polyomino.of_order 4 in
    let board = Board.classic in
    let target = Point.{x=0;y=0} in

    pentos |> List.iter (fun piece -> 
      Printf.printf "===============\nPlacing @ (%d, %d):\n%s" target.x target.y (Polyomino.to_string piece);
      place_one piece board target
      |> Searchspace.to_seq
      |> Seq.iter (fun placement -> 
        Board.put board placement.points placement.piece 
        |> Board.to_string
        |> Printf.printf "\n%s"
      )
    )
    ; [%expect{|
      ===============
      Placing @ (0, 0):
      ####

      AAAA....
      ........
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      A.......
      A.......
      A.......
      A..##...
      ...##...
      ........
      ........
      ........
      ===============
      Placing @ (0, 0):
      ###
      #..

      BBB.....
      B.......
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      BBB.....
      ..B.....
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      BB......
      B.......
      B.......
      ...##...
      ...##...
      ........
      ........
      ........

      BB......
      .B......
      .B......
      ...##...
      ...##...
      ........
      ........
      ........

      B.......
      BBB.....
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      B.......
      B.......
      BB......
      ...##...
      ...##...
      ........
      ........
      ........
      ===============
      Placing @ (0, 0):
      ###
      .#.

      CCC.....
      .C......
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      C.......
      CC......
      C.......
      ...##...
      ...##...
      ........
      ........
      ........
      ===============
      Placing @ (0, 0):
      ##
      ##

      DD......
      DD......
      ........
      ...##...
      ...##...
      ........
      ........
      ........
      ===============
      Placing @ (0, 0):
      ##.
      .##

      EE......
      .EE.....
      ........
      ...##...
      ...##...
      ........
      ........
      ........

      E.......
      EE......
      .E......
      ...##...
      ...##...
      ........
      ........
      ........ |}]